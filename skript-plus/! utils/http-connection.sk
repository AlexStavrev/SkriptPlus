import:
  ch.njol.skript.lang.Variable
  java.io.BufferedReader
  java.io.File
  java.io.FileOutputStream
  java.io.InputStreamReader
  java.io.OutputStream
  java.lang.Long
  java.lang.StringBuffer
  java.net.HttpURLConnection
  java.net.URL
  java.nio.channels.Channels
  java.nio.charset.StandardCharsets
  java.util.HashMap

command download_skbee:
  trigger:
    broadcast "started!"
    create section with arguments variables {_link} stored in {_section}:
      set {_url} to new URL({_link})
      set {_file} to new File("/home/container/plugins/skbee_test.jar")

      # create the path if it doesn't exist for some reason
      {_file}.getParentFile().mkdirs()
      {_file}.createNewFile()
      
      # download the file
      set {_readableByteChannel} to Channels.newChannel({_url}.openStream())
      set {_fileOutputStream} to new FileOutputStream({_file}) 
      set {_fileChannel} to {_fileOutputStream}.getChannel()
      {_fileChannel}.transferFrom({_readableByteChannel}, 0, Long.MAX_VALUE)

    run section {_section} async with arguments "https://github.com/ShaneBeee/SkBee/releases/download/2.5.1/SkBee-2.5.1.jar" and wait
    broadcast "done!"

effect send a %string% request to %string% [with data %-string%] and store it in %~object%:
  parse:
    expr-4 is an instance of Variable
    continue
    
  trigger:
    delay effect
    create section with arguments variables {_method}, {_link}, {_data} stored in {_section}:
      set {_url} to new URL({_link})

      set {_con} to {_url}.openConnection()
      {_con}.setRequestMethod({_method})

      if {_method} = "POST":
        {_con}.setDoOutput(true)
        {_con}.setRequestProperty("Accept", "application/json")
        {_con}.setRequestProperty("Content-Type", "application/x-www-form-urlencoded")
        set {_os} to {_con}.getOutputStream()
        {_os}.write({_data}.getBytes(StandardCharsets.UTF_8))
        {_os}.flush()
        {_os}.close()  

      set {_status} to {_con}.getResponseCode()
      if {_status} != HttpURLConnection.HTTP_OK:
        send "&c[Skript+] Error while sending a %{_method}% request to %{_link}%. Response Code %{_status}%." to console
        stop
       
      set {_in} to new BufferedReader(new InputStreamReader({_con}.getInputStream()))
      set {_response} to new StringBuffer()
      while true = true:
        set {_input} to {_in}.readLine()
        if {_input} is set:
          {_response}.append({_input})
        else:
          stop loop 
          
      return {_response}.toString()
      
    run section {_section} async with arguments (expr-1, expr-2, (expr-3 ? "")) and store the result in {_response} and wait
    set raw expr-4 to {_response}
    broadcast {_response}
    continue

effect get the latest version of %string% and store it in %~object%:
  parse:
    expr-2 is an instance of Variable
    continue
  trigger:
    delay effect
    # load the addon repo list
    set {_prop} to getAddonProperties()
  
    # send a request to the link and return the latest version
    set {_repo} to {_prop}.getProperty((lowercase expr-1))
    send a "GET" request to

    # read the response
    set {_gson} to new Gson()
    set {_json} to {_gson}.fromJson({_response}, JsonObject.class)
    set raw expr-2 to {_json}.get("tag_name").getAsString()
    continue

function http_test():
  send a "GET" request to "https://api.github.com/repos/ShaneBeee/SkBee/releases/latest" and store it in {_response}
  broadcast getLatestVersionFromResponse({_response}, "github")